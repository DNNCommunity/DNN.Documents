
/** Create Documents Table **/

IF NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Documents]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}Documents]
		(
			[ItemID] [int] NOT NULL IDENTITY(0, 1),
			[ModuleID] [int] NOT NULL,
			[CreatedDate] [datetime] NULL,
			[URL] [nvarchar] (250) NULL,
			[Title] [nvarchar] (150) NULL,
			[Category] [nvarchar] (50) NULL,
			[CreatedByUserID] INT NULL, 
			[OwnedByUserID] INT NULL, 
			[ModifiedByUserID] INT NULL, 
			[ModifiedDate] datetime NULL, 
			[SortOrderIndex] INT NULL, 
			[Description] nvarchar (255) NULL,
			ForceDownload BIT
		)

		ALTER TABLE {databaseOwner}[{objectQualifier}Documents] ADD CONSTRAINT [PK_{objectQualifier}Documents] PRIMARY KEY NONCLUSTERED  ([ItemID])
		CREATE CLUSTERED INDEX [IX_{objectQualifier}Documents] ON {databaseOwner}[{objectQualifier}Documents] ([ModuleID])

		ALTER TABLE {databaseOwner}[{objectQualifier}Documents] WITH NOCHECK ADD
		CONSTRAINT [FK_{objectQualifier}Documents_{objectQualifier}Modules] FOREIGN KEY ([ModuleID]) REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID]) ON DELETE CASCADE
	END
GO

/* Procs for Documents */
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DeleteDocument]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteDocument]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}UpdateDocument') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}UpdateDocument
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}GetDocument') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}GetDocument
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}GetDocuments') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}GetDocuments
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}AddDocument') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}AddDocument
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateDocument
	@ModuleId		  INT,
	@ItemId           INT,
	@Title            nvarchar(150),
	@URL              nvarchar(250),
	@UserId           INT,
	@Category         nvarchar(50),
	@OwnedByUserID    INT,
	@SortOrderIndex   INT, 
	@Description      nvarchar(255),
	@ForceDownload BIT
AS
UPDATE {databaseOwner}{objectQualifier}Documents
SET    Title             = @Title,
       URL               = @URL,
       Category          = @Category,
       OwnedByUserID     = @OwnedByUserID,
       ModifiedByUserID  = @UserId,
       ModifiedDate      = getdate(),
       SortOrderIndex    = @SortOrderIndex,
       Description       = @Description,
	   ForceDownload	 = @ForceDownload
WHERE  ItemId = @ItemId
	AND ModuleId = @ModuleId
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteDocument]
	@ModuleId INT, 
	@ItemId INT
AS

DELETE FROM {objectQualifier}Documents
WHERE  ItemId = @ItemId
	AND ModuleId = @ModuleId

GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetDocument
	@ItemId   INT,
	@ModuleId INT
AS
SELECT {objectQualifier}Documents.Itemid,
       {objectQualifier}Documents.Moduleid,
       {objectQualifier}Documents.Title,
       {objectQualifier}Documents.Url,
       {objectQualifier}Documents.Category,
       CreatedByUser.FirstName + ' ' + CreatedByUser.LastName AS "CreatedByUser",
       OwnedByUser.FirstName + ' ' + OwnedByUser.LastName AS "OwnedByUser",
       ModifiedByUser.FirstName + ' ' + ModifiedByUser.LastName AS "ModifiedByUser",       
       {objectQualifier}Files.Size,
       {objectQualifier}Files.ContentType,
       {objectQualifier}UrlTracking.TrackClicks,
       {objectQualifier}UrlTracking.Clicks,
       {objectQualifier}UrlTracking.NewWindow,
       {objectQualifier}Documents.OwnedByUserID, 
       {objectQualifier}Documents.ModifiedByUserID, 
       {objectQualifier}Documents.ModifiedDate,
       {objectQualifier}Documents.CreatedByUserID, 
       {objectQualifier}Documents.CreatedDate, 
       {objectQualifier}Documents.SortOrderIndex,
       {objectQualifier}Documents.Description,
	   {objectQualifier}Documents.ForceDownload
FROM {databaseOwner}{objectQualifier}Documents
LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users AS CreatedByUser on {objectQualifier}Documents.CreatedByUserID = CreatedByUser.UserId 
LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users AS OwnedByUser on {objectQualifier}Documents.OwnedByUserID = OwnedByUser.UserId
LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users  AS ModifiedByUser on {objectQualifier}Documents.ModifiedByUserID = ModifiedByUser.UserId
LEFT OUTER JOIN {databaseOwner}{objectQualifier}UrlTracking on {objectQualifier}Documents.URL = {objectQualifier}UrlTracking.Url and {objectQualifier}UrlTracking.ModuleId = @ModuleID
LEFT OUTER JOIN {databaseOwner}{objectQualifier}Files on {objectQualifier}Documents.URL = 'fileid=' +
convert(varchar,{databaseOwner}{objectQualifier}Files.FileID)
WHERE  {databaseOwner}{objectQualifier}Documents.ItemId = @ItemId
and    {databaseOwner}{objectQualifier}Documents.ModuleId = @ModuleId

GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetDocuments
	@ModuleId INT,
	@PortalId INT
AS
SELECT {objectQualifier}Documents.ItemId,
        {objectQualifier}Documents.Moduleid,
       {objectQualifier}Documents.Title,
       {objectQualifier}Documents.Url,
       CreatedByUser.FirstName + ' ' + CreatedByUser.LastName AS "CreatedByUser",
       OwnedByUser.FirstName + ' ' + OwnedByUser.LastName AS "OwnedByUser",
       ModifiedByUser.FirstName + ' ' + ModifiedByUser.LastName AS "ModifiedByUser",       
       {objectQualifier}Documents.Category,
       {objectQualifier}Files.Size,
       {objectQualifier}UrlTracking.TrackClicks,
       {objectQualifier}UrlTracking.Clicks,
       {objectQualifier}UrlTracking.NewWindow,
       {objectQualifier}Documents.OwnedByUserID, 
       {objectQualifier}Documents.ModifiedByUserID, 
       {objectQualifier}Documents.ModifiedDate,
       {objectQualifier}Documents.CreatedByUserID, 
       {objectQualifier}Documents.CreatedDate, 
       {objectQualifier}Documents.SortOrderIndex,
       {objectQualifier}Documents.Description,
	   {objectQualifier}Documents.ForceDownload
FROM {databaseOwner}{objectQualifier}Documents
LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users AS CreatedByUser on {databaseOwner}{objectQualifier}Documents.CreatedByUserID = CreatedByUser.UserId 
LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users AS OwnedByUser on {databaseOwner}{objectQualifier}Documents.OwnedByUserID = OwnedByUser.UserId
LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users  AS ModifiedByUser on {databaseOwner}{objectQualifier}Documents.ModifiedByUserID = ModifiedByUser.UserId
LEFT OUTER JOIN {databaseOwner}{objectQualifier}Files on {databaseOwner}{objectQualifier}Documents.URL = 'fileid=' + convert(varchar,{databaseOwner}{objectQualifier}Files.FileID)
LEFT OUTER JOIN {databaseOwner}{objectQualifier}UrlTracking on {databaseOwner}{objectQualifier}Documents.URL = {databaseOwner}{objectQualifier}UrlTracking.Url and {databaseOwner}{objectQualifier}UrlTracking.ModuleId = @ModuleID
WHERE  {objectQualifier}Documents.ModuleId = @ModuleId
ORDER by {objectQualifier}Documents.Title
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddDocument
	@ModuleId         INT,
	@Title            NVARCHAR(150),
	@URL              NVARCHAR(250),
	@UserId           INT,
	@OwnedByUserId    INT,
	@Category         NVARCHAR(50),
	@SortOrderIndex   INT, 
	@Description      NVARCHAR(255),
	@ForceDownload	BIT
AS
INSERT INTO {databaseOwner}{objectQualifier}Documents (
  ModuleId,
  Title,
  URL,
  CreatedByUserID,
  CreatedDate,
  Category,
  OwnedByUserID,
  ModifiedByUserID,
  ModifiedDate,
  SortOrderIndex,
  Description,
  ForceDownload
)
VALUES (
  @ModuleId,
  @Title,
  @URL,
  @UserId,
  getdate(),
  @Category,
  @OwnedByUserId,
  @UserId,
  getdate(),
  @SortOrderIndex,
  @Description,
  @ForceDownload
)
SELECT SCOPE_IDENTITY()
GO



IF NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DocumentsSettings]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}DocumentsSettings]
		(
			ModuleID int NOT NULL,
			ShowTitleLink BIT NULL,
			SortOrder NVARCHAR(2000) NULL,
			DisplayColumns NVARCHAR(2000) NULL,
			UseCategoriesList BIT NULL,
			DefaultFolder NVARCHAR(2000),
			CategoriesListName NVARCHAR(50),
			AllowUserSort BIT
		)

		ALTER TABLE {databaseOwner}{objectQualifier}DocumentsSettings 
			ADD CONSTRAINT PK_{objectQualifier}DocumentsSettings PRIMARY KEY CLUSTERED  (ModuleID)

		ALTER TABLE {databaseOwner}{objectQualifier}DocumentsSettings 
			ADD CONSTRAINT FK_{objectQualifier}DocumentsSettings_Modules FOREIGN KEY (ModuleID) 
				REFERENCES {databaseOwner}{objectQualifier}Modules (ModuleID) ON DELETE CASCADE 
	END
GO

/* Procs for Settings */

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}AddDocumentsSettings]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddDocumentsSettings]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdateDocumentsSettings]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateDocumentsSettings]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}DeleteDocumentsSettings]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteDocumentsSettings]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetDocumentsSettings]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetDocumentsSettings]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddDocumentsSettings]
	@ModuleId          INT,
	@ShowTitleLink     BIT,
	@SortOrder         NVARCHAR(2000),
	@DisplayColumns    NVARCHAR(2000),
	@UseCategoriesList BIT,
	@DefaultFolder     NVARCHAR(2000),
	@CategoriesListName NVARCHAR(50),
	@AllowUserSort     BIT

AS
INSERT INTO {databaseOwner}[{objectQualifier}DocumentsSettings] (
  ModuleId,
  ShowTitleLink,
  SortOrder,    
  DisplayColumns,
  UseCategoriesList,
  DefaultFolder,
  CategoriesListName,
  AllowUserSort
)
VALUES (
  @ModuleId,
  @ShowTitleLink,
  @SortOrder,    
  @DisplayColumns,
  @UseCategoriesList,
  @DefaultFolder,
  @CategoriesListName,
  @AllowUserSort
)
SELECT @ModuleId
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateDocumentsSettings
	@ModuleId          INT,
	@ShowTitleLink     BIT,
	@SortOrder         NVARCHAR(2000),
	@DisplayColumns    NVARCHAR(2000),
	@UseCategoriesList BIT,
	@DefaultFolder     NVARCHAR(2000),
	@CategoriesListName NVARCHAR(50),
	@AllowUserSort     BIT

AS
UPDATE {databaseOwner}{objectQualifier}DocumentsSettings
SET    ShowTitleLink=@ShowTitleLink,
       SortOrder=@SortOrder,    
       DisplayColumns=@DisplayColumns,
       UseCategoriesList=@UseCategoriesList,
       DefaultFolder=@DefaultFolder,
       CategoriesListName=@CategoriesListName,
       AllowUserSort=@AllowUserSort
WHERE  ModuleId = @ModuleId
GO

CREATE  PROCEDURE {databaseOwner}[{objectQualifier}DeleteDocumentsSettings]
	@ModuleId INT
AS
DELETE
FROM {objectQualifier}DocumentsSettings
WHERE  ModuleId = @ModuleId
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDocumentsSettings]
	@ModuleId INT
AS
SELECT *
FROM {objectQualifier}DocumentsSettings
WHERE  ModuleId = @ModuleId
GO
